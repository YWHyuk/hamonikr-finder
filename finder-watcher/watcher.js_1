const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');
const chokidar = require('chokidar');
const request = require('request');
const Router = require('koa-router');
const watcher = new Router();
const rp = require('request-promise');
const axios = require('axios');
const FormData = require('form-data');
const concat = require("concat-stream");

const delay = require('delay');
const sleep = delay => new Promise(resolve => { setTimeout(resolve, delay) }, delay)
const moment = require("moment");

var https = require('https');
var http = require('http');

https.globalAgent.maxSockets = 50000;
http.globalAgent.maxSockets = 50000;
let chkLimitCnt = 0;
var searchPathAry = new Array();
function getSearchPath(){

	var osType = require('os');
	var fileDir = osType.homedir() + '/.config/hamonikr_finder/finder_config';
  var tmpStr = fs.readFileSync(fileDir, 'utf8');
  var arrPath = tmpStr.split('\n');

  for(var i=0; i<arrPath.length-1; i++){
    searchPathAry[i] = arrPath[i];
  }
}


const ES_UPLOAD_PATH = 'http://192.168.0.56:8081/_upload'
const DB_FILE = './db/files.db';
//const FILE_FOLDER = '/home/rnd/test-file';
const FILE_FOLDER = searchPathAry;
const FileSharing = "PV";
const initializeDB = () => {

  //const dropQuery = `DROP TABLE IF EXISTS filelist`;
  
	return new Promise((resolve, reject) => {
					const insertQuery = `CREATE TABLE IF NOT EXISTS filelist(
																file_id INTEGER PRIMARY KEY AUTOINCREMENT,
																local_path VARCHAR(100),
																url VARCHAR(20))`;
						
					const db = new sqlite3.Database(DB_FILE, sqlite3.OPEN_CREATE | sqlite3.OPEN_READWRITE, (err) => {
						if (err) {
							return console.error(err.message);
						}
						
						db.serialize(() => {
							// db.each(dropQuery);
							db.run(insertQuery);
						})
						
						db.close((err) => {
							if (err) {
								return reject(console.error(err.message));
							}

							console.log('init db close');
							return resolve('done');
						});
					});
	});
}

const maintest = async (userUuid) => {
	const watcher = chokidar.watch(FILE_FOLDER, {
    ignored: /(^|[\/\\])\../, // ignore dotfiles
    persistent: true,
		ignoreInitial: false,
    followSymlinks: true,
    //cwd: '.',
    disableGlobbing: false,

    usePolling: false,
    interval: 100,
    binaryInterval: 300,
    alwaysStat: false,
    depth: 99,
    awaitWriteFinish: {
      stabilityThreshold: 5000,
      pollInterval: 100
    },

    ignorePermissionErrors: false,
    atomic: true
  });

	watcher.on('ready', function() {
    console.log('Newly watched paths:', watcher.getWatched());
  });

}


const main = async (userUuid) => {

	const userIndexUUID = userUuid;
	const res = fs.existsSync(DB_FILE);
	if (res == false) {
		console.log("initializeDB");
  	await initializeDB();
	}
	console.log("initializeDB next");


  const db = new sqlite3.Database(DB_FILE, sqlite3.OPEN_READWRITE);

  process.on('exit', function () {
    db.close((err) => {
      if (err) {
        return console.error(err.message);
      }
      console.log('Close the database connection.');
    });
    console.log('Goodbye!');
  });
  
  

  const watcher = chokidar.watch(FILE_FOLDER, {
    ignored: /(^|[\/\\])\../, // ignore dotfiles
    persistent: true,
    ignoreInitial: false,
    followSymlinks: true,
    //cwd: '.',
    disableGlobbing: false,

    usePolling: false,
    interval: 100,
    binaryInterval: 300,
    alwaysStat: false,
    depth: 99,
    awaitWriteFinish: {
      stabilityThreshold: 2000,
      pollInterval: 1000
    },

    ignorePermissionErrors: false,
    atomic: true
  });

  //watcher.on('ready', function() {
  //  console.log('Newly watched paths:', watcher.getWatched());
  //});

  let runningCnt = 0;
  let endRunningCnt = 0;
  let testCnt =0;
  let aCnt = 0;
  watcher.on('all', async (event, path) => {
    const asyncQuery = (query) => {
      return new Promise((resolve, reject) => {
        // console.log(`${query}`);
        db.all(query, [], (err, rows) => {
          if (err) {
            return reject(err);
          }
  
          // console.log(`rows.length = ${rows.length}`);

          (rows.length > 0) ? resolve(true) : resolve(false);
        });
      });
    };
    
    // console.log(event, path);
    if (event == 'addDir') {
//      console.log(`Ignore addDir ${path}`);
    }

    if (event == 'unlinkDir') {
  //    console.log(`Ignore unlinkDir ${path}`);
    }
    
    if (event == 'add') {
      
      // testCnt++;
      console.log(testCnt);
      
			var osType = require('os');
		  var fileDir  = osType.homedir() + '/.config/hamonikr_finder/indexingFile';			
			var nowMoment = moment(new Date()).format(fmt1); //Date 객체를 파라미터로 넣기
			
			endTime = nowMoment;
			 var fileArg = "[" + nowMoment +"]" + runningCnt +",   path====> "+ path +"\n";
			 	// fs.appendFile(fileDir, fileArg, (err) => {
	   	 	//        if(err) { console.log("err====" + err);}
			 	// });

      // endRunningCnt = runningCnt;

      const fsrestUpload = (path, gb) => {
				return new Promise((resolve, reject) => {
          // console.log("oooooooooooooooooooooooooo"  +'--' + path);

          const formData = {
            index: userIndexUUID,
            file: fs.createReadStream(path), //fs.readFileSync(path, 'utf8'), 
            tags: "{\"external\":{\"description\":\""+path +" \", \"FileSharing\":\""+FileSharing+"\", \"owner_uuid\":\""+userIndexUUID+"\", \"owner_nm\":\""+userIndexUUID+"\"}}" //fs.createReadStream("tagtest" + runningCnt +".txt")
          };

          console.log('upload---time-' +nowMoment +',  cnt --' + runningCnt);
          request.post({url: ES_UPLOAD_PATH, formData: formData}, async (err, response, body) => {

            try {
              if (err) {
            //		return reject(err);
                console.log(gb + "err" + err);
              }
              
              console.log("(body============" +body);
              const result = JSON.parse(body);
              if (result.ok == false) {
                return console.log('upload failed');
                // return reject(err);
              }

              // console.log('업로드 한 파일의 hash 값을 local DB 에 저장한다.');
              const addQuery = `insert into filelist(local_path, url) values ('${path}', '${result.url}')`;
              const res = await asyncQuery(addQuery);

              //console.log('DB insert 되었는지 확인');
              const query = `SELECT * FROM filelist WHERE local_path = '${path}'`;
              //const found = await asyncFind(query);
              const found = await asyncQuery(query);
              if (err) {
                return console.error("error indsert === "+ err.message);
            
              }
              // runningCnt = 0;
              resolve(runningCnt);
              //console.log('post resolved');
            } catch (e) {
              return reject(e);
            }
          });
				});
      };
   
      // if( testCnt >= 1000 ){
      //   // chkLimitCnt = runningCnt/1000 *1000; 
      //   // await delay(3000);
      //   console.log("111111111111111111111111");
      //     await sleep(5000);
      // }

          await fsrestUpload(path, "aaaaaaaa---").then( console.log('done====================================================================') );

          // setTimeout(async () => {
          //   try {

          //     runningCnt++;
          //     // endRunningCnt = runningCnt;
          //     console.log("====+> "+ runningCnt +"====" + path);
          //     console.log("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=="+ runningCnt+"chkLimitCnt===="+chkLimitCnt +'--' + path);
              
          //     // if( runningCnt <= 1000 ){
          //     //   console.log("================================================================================================1111111111111111111111111111111");
          //     //   await fsrestUpload(path, "aaaaaaaa---");
          //     //   await sleep(1000);
          //     // }else if( runningCnt <= 2000  && runningCnt > 1000 ){
          //     //   console.log("================================================================================================22222222222222222222222222222222");
          //     //   await fsrestUpload(path, "aaaaaaaa---");
          //     //   await sleep(1000);
          //     // }else if( runningCnt <= 3000 && runningCnt > 2000){
          //     //   console.log("================================================================================================3333333333333333333333333333333333");
          //     //   await fsrestUpload(path, "aaaaaaaa---");
          //     //   await sleep(1000);
          //     // }else if( runningCnt <= 4000 && runningCnt > 3000){
          //     //   console.log("================================================================================================4444444444444444444444444");
          //     //   await fsrestUpload(path, "aaaaaaaa---");
          //     //   await sleep(1000);
          //     // }

          //     if( endRunningCnt == runningCnt ){
          //       console.log("end");
          //     }
          //   } catch (e) {
          //     return reject(e);
          //   }
          // }, 5000);    
      // }
      // else{
      //   await delay(1000);
      //   console.log("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb--------" + runningCnt % 1000 +"===="+ runningCnt+"chkLimitCnt===="+chkLimitCnt);
      //   await fsrestUpload(path, "bbbbbbbbb---");
  	  // }
			//console.log("r====="+ runningCnt +"=="+ endRunningCnt);

// if( endRunningCnt == runningCnt ){
// console.log("end");
  // var fileArg = "StartTime : " + startTime+ "\n EndTime : "+endTime+" \nTotal File Cnt: [" + runningCnt +"]";
  // fs.appendFile(fileDir, fileArg, (err) => {
  //     if(err) throw err;
  //     //console.log('File Appended');
  // });
// }

      runningCnt = 0;        
//  		endRunningCnt = 0;   
    }
    // console.log("tttaaa==="+ runningCnt);
    if (event == 'change') {
      console.log('파일이 변경된 경우');
      const query = `SELECT * FROM filelist WHERE local_path = '${path}'`;
      const found = await asyncQuery(query);

      if (found == false) {
        return console.log(`Local DB 에서 파일을 찾을 수 없음.`);
      }
      
      // console.log(`여기서 ES 서버에 파일을 다시 업로드 할 것... ${path}`);
      request.post({url: ES_UPLOAD_PATH, formData: {file: fs.createReadStream(path)}}, async (err, response, body) => {
        if (err) {
          return console.error('upload failed:', err);
        }
        
        const result = JSON.parse(body);
        if (result.ok == false) {
          return console.log('upload failed');
        }
      });
    }

    if (event == 'unlink') {
      // console.log('파일을 삭제하는 경우')
      const delQuery = `DELETE FROM filelist WHERE local_path = '${path}'`;
      const res = await asyncQuery(delQuery);

      console.log(`여기서 ES 서버 데이터 삭제할 것 ... ${path}`);
    }
  });
};

function watcherstart(arg){
  console.log('action~~~  ' + JSON.stringify(arg));
  getSearchPath();
  main();
}
let startTime;
let endTime;
let second = 1000 * 60;
let fmt1 = 'YYYY.MM.DD HH:mm:ss.SSSSSSS';
let  nowMoment = moment(new Date()).format(fmt1); //Date 객체를 파라미터로 넣기

function fileIndexingDel(){
	var osType = require('os');
  var fileDir  = osType.homedir() + '/.config/hamonikr_finder/indexingFile';
	 if (fs.existsSync(fileDir)) {
		fs.unlinkSync(fileDir);
	}

  startTime = nowMoment;

}
module.exports = {
	start: function(arg){
  	fileIndexingDel();
	  getSearchPath();
 	  main(arg);
// maintest(arg);
	}
};


